Guia de In√≠cio R√°pido
=====================

Este guia ir√° ajud√°-lo a come√ßar a usar o CodeHealthAnalyzer rapidamente.

Primeiro Uso
------------

Ap√≥s a instala√ß√£o, voc√™ pode come√ßar a usar o CodeHealthAnalyzer imediatamente:

.. code-block:: bash

   # Navegar para o diret√≥rio do seu projeto
   cd /caminho/para/seu/projeto

   # Executar an√°lise b√°sica
   codehealthanalyzer analyze .

Comandos B√°sicos da CLI
-----------------------

**An√°lise Completa**

.. code-block:: bash

   codehealthanalyzer analyze . --format json --output reports/

**Score de Qualidade**

.. code-block:: bash

   codehealthanalyzer score .

**Informa√ß√µes do Projeto**

.. code-block:: bash

   codehealthanalyzer info .

**An√°lises Espec√≠ficas**

.. code-block:: bash

   # Apenas viola√ß√µes de tamanho
   codehealthanalyzer violations .

   # Apenas templates HTML
   codehealthanalyzer templates .

   # Apenas erros de linting
   codehealthanalyzer errors .

Uso da API Python
-----------------

**Exemplo B√°sico**

.. code-block:: python

   from codehealthanalyzer import CodeAnalyzer

   # Criar analisador
   analyzer = CodeAnalyzer('.')

   # Obter score de qualidade
   score = analyzer.get_quality_score()
   print(f"Score: {score}/100")

**An√°lise Completa**

.. code-block:: python

   from codehealthanalyzer import CodeAnalyzer

   analyzer = CodeAnalyzer('/caminho/para/projeto')
   
   # Gerar relat√≥rio completo
   report = analyzer.generate_full_report(output_dir='reports')
   
   # Acessar dados espec√≠ficos
   violations = analyzer.analyze_violations()
   templates = analyzer.analyze_templates()
   errors = analyzer.analyze_errors()

**Com Configura√ß√£o Personalizada**

.. code-block:: python

   config = {
       'limits': {
           'python_function': {'yellow': 25, 'red': 40},
           'python_class': {'yellow': 250, 'red': 400}
       }
   }
   
   analyzer = CodeAnalyzer('.', config)
   report = analyzer.generate_full_report()

Interpretando os Resultados
---------------------------

**Score de Qualidade**

* **80-100**: üü¢ Excelente - C√≥digo de alta qualidade
* **60-79**: üü° Bom - Algumas melhorias recomendadas
* **0-59**: üî¥ Precisa melhorar - A√ß√£o necess√°ria

**Prioridades**

* **Alta**: Problemas que afetam funcionalidade ou manutenibilidade
* **M√©dia**: Melhorias recomendadas para qualidade
* **Baixa**: Otimiza√ß√µes opcionais

**Tipos de Viola√ß√µes**

* **Fun√ß√£o longa**: Mais de 50 linhas
* **Classe grande**: Mais de 500 linhas
* **M√≥dulo extenso**: Mais de 1000 linhas
* **Template longo**: Mais de 200 linhas

Pr√≥ximos Passos
---------------

1. **Configura√ß√£o**: Personalize limites e regras no arquivo de configura√ß√£o
2. **Integra√ß√£o**: Adicione ao seu pipeline de CI/CD
3. **Relat√≥rios**: Explore diferentes formatos de sa√≠da (HTML, Markdown, CSV)
4. **Automa√ß√£o**: Use a API Python para integra√ß√£o personalizada

Veja a se√ß√£o :doc:`configuration` para mais detalhes sobre personaliza√ß√£o.